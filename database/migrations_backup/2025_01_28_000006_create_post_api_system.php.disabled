<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        // Önce mevcut API tablolarını ve view'ları sil
        $this->dropExistingApiStructures();
        
        // 1. API Keys tablosu - API erişim anahtarları
        Schema::create('api_keys', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users')->onDelete('cascade');
            $table->string('name', 100); // API key adı
            $table->string('key', 64)->unique(); // API anahtarı
            $table->string('secret', 128)->nullable(); // API secret (webhook'lar için)
            $table->json('permissions')->nullable(); // İzinler: ['posts.read', 'posts.write', 'polls.read', etc.]
            $table->json('rate_limits')->nullable(); // Rate limit ayarları
            $table->string('allowed_ips')->nullable(); // İzin verilen IP'ler (virgülle ayrılmış)
            $table->timestamp('expires_at')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->integer('usage_count')->default(0);
            $table->boolean('is_active')->default(true);
            $table->timestamps();
            
            // İndeksler
            $table->index(['user_id', 'is_active']);
            $table->index(['key']);
            $table->index(['expires_at']);
        });

        // 2. API Logs tablosu - API kullanım logları
        Schema::create('api_logs', function (Blueprint $table) {
            $table->id();
            $table->foreignId('api_key_id')->nullable()->constrained('api_keys')->onDelete('set null');
            $table->foreignId('user_id')->nullable()->constrained('users')->onDelete('set null');
            $table->string('endpoint', 200);
            $table->string('method', 10); // GET, POST, PUT, DELETE
            $table->string('ip_address', 45);
            $table->string('user_agent', 500)->nullable();
            $table->json('request_data')->nullable();
            $table->json('response_data')->nullable();
            $table->integer('response_code');
            $table->decimal('response_time', 8, 3)->nullable(); // milisaniye
            $table->timestamp('requested_at');
            $table->timestamps();
            
            // İndeksler
            $table->index(['api_key_id', 'requested_at']);
            $table->index(['user_id', 'requested_at']);
            $table->index(['endpoint', 'method']);
            $table->index(['response_code']);
            $table->index(['requested_at']);
        });

        // 3. Webhooks tablosu - Webhook konfigürasyonları
        Schema::create('webhooks', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users')->onDelete('cascade');
            $table->string('name', 100);
            $table->string('url', 500);
            $table->json('events'); // ['post.created', 'post.updated', 'poll.voted', etc.]
            $table->string('secret', 128)->nullable(); // Webhook doğrulama için
            $table->json('headers')->nullable(); // Ek HTTP header'ları
            $table->integer('timeout')->default(30); // Saniye
            $table->integer('retry_count')->default(3);
            $table->boolean('verify_ssl')->default(true);
            $table->boolean('is_active')->default(true);
            $table->timestamp('last_triggered_at')->nullable();
            $table->integer('success_count')->default(0);
            $table->integer('failure_count')->default(0);
            $table->timestamps();
            
            // İndeksler
            $table->index(['user_id', 'is_active']);
            $table->index(['is_active']);
        });

        // 4. Webhook Deliveries tablosu - Webhook teslimat logları
        Schema::create('webhook_deliveries', function (Blueprint $table) {
            $table->id();
            $table->foreignId('webhook_id')->constrained('webhooks')->onDelete('cascade');
            $table->string('event_type', 50);
            $table->json('payload');
            $table->string('delivery_id', 36)->unique(); // UUID
            $table->integer('attempt_count')->default(1);
            $table->integer('response_code')->nullable();
            $table->text('response_body')->nullable();
            $table->text('error_message')->nullable();
            $table->decimal('response_time', 8, 3)->nullable();
            $table->enum('status', ['pending', 'delivered', 'failed', 'cancelled'])->default('pending');
            $table->timestamp('delivered_at')->nullable();
            $table->timestamp('next_retry_at')->nullable();
            $table->timestamps();
            
            // İndeksler
            $table->index(['webhook_id', 'status']);
            $table->index(['event_type', 'created_at']);
            $table->index(['status', 'next_retry_at']);
            $table->index(['delivery_id']);
        });

        // 5. Rate Limits tablosu - API rate limiting
        Schema::create('rate_limits', function (Blueprint $table) {
            $table->id();
            $table->string('identifier', 100); // API key, IP, user_id
            $table->string('endpoint', 200);
            $table->integer('requests_count')->default(1);
            $table->timestamp('window_start')->nullable();
            $table->timestamp('window_end')->nullable();
            $table->timestamps();
            
            // İndeksler
            $table->unique(['identifier', 'endpoint', 'window_start']);
            $table->index(['window_end']);
        });

        // 6. API Cache tablosu - API response cache
        Schema::create('api_cache', function (Blueprint $table) {
            $table->id();
            $table->string('cache_key', 255)->unique();
            $table->longText('cache_value');
            $table->json('tags')->nullable(); // Cache tag'leri
            $table->timestamp('expires_at');
            $table->timestamps();
            
            // İndeksler
            $table->index(['cache_key']);
            $table->index(['expires_at']);
        });

        // 7. Stored Procedures oluştur
        $this->createApiStoredProcedures();
        
        // 8. API Views oluştur
        $this->createApiViews();
    }

    /**
     * Mevcut API yapılarını temizle
     */
    private function dropExistingApiStructures(): void
    {
        // Views'leri sil
        DB::statement('DROP VIEW IF EXISTS api_endpoints_stats');
        DB::statement('DROP VIEW IF EXISTS webhooks_status');
        DB::statement('DROP VIEW IF EXISTS api_keys_summary');

        // Stored procedures'ları sil
        DB::statement('DROP PROCEDURE IF EXISTS GetWebhookDeliveryStats');
        DB::statement('DROP PROCEDURE IF EXISTS GetApiUsageStats');

        // Tabloları sil (foreign key sırası önemli)
        Schema::dropIfExists('api_cache');
        Schema::dropIfExists('rate_limits');
        Schema::dropIfExists('webhook_deliveries');
        Schema::dropIfExists('webhooks');
        Schema::dropIfExists('api_logs');
        Schema::dropIfExists('api_keys');
    }

    /**
     * API için stored procedure'ları oluştur
     */
    private function createApiStoredProcedures(): void
    {
        // API kullanım istatistikleri
        DB::statement('
            CREATE PROCEDURE GetApiUsageStats(
                IN p_api_key_id INT,
                IN p_start_date DATE,
                IN p_end_date DATE
            )
            BEGIN
                SELECT 
                    DATE(requested_at) as date,
                    COUNT(*) as total_requests,
                    COUNT(CASE WHEN response_code < 400 THEN 1 END) as successful_requests,
                    COUNT(CASE WHEN response_code >= 400 THEN 1 END) as failed_requests,
                    AVG(response_time) as avg_response_time,
                    MAX(response_time) as max_response_time,
                    COUNT(DISTINCT endpoint) as unique_endpoints
                FROM api_logs 
                WHERE api_key_id = p_api_key_id
                    AND DATE(requested_at) BETWEEN p_start_date AND p_end_date
                GROUP BY DATE(requested_at)
                ORDER BY date DESC;
            END
        ');

        // Webhook teslimat durumu
        DB::statement('
            CREATE PROCEDURE GetWebhookDeliveryStats(
                IN p_webhook_id INT,
                IN p_days INT
            )
            BEGIN
                SELECT 
                    DATE(created_at) as date,
                    COUNT(*) as total_deliveries,
                    COUNT(CASE WHEN status = "delivered" THEN 1 END) as successful_deliveries,
                    COUNT(CASE WHEN status = "failed" THEN 1 END) as failed_deliveries,
                    COUNT(CASE WHEN status = "pending" THEN 1 END) as pending_deliveries,
                    AVG(response_time) as avg_response_time,
                    AVG(attempt_count) as avg_attempts
                FROM webhook_deliveries 
                WHERE webhook_id = p_webhook_id
                    AND created_at >= DATE_SUB(NOW(), INTERVAL p_days DAY)
                GROUP BY DATE(created_at)
                ORDER BY date DESC;
            END
        ');
    }

    /**
     * API için view'ları oluştur
     */
    private function createApiViews(): void
    {
        // API key'lerin kullanım özeti
        DB::statement('
            CREATE VIEW api_keys_summary AS
            SELECT 
                ak.id,
                ak.name,
                ak.user_id,
                CONCAT(u.first_name, " ", u.last_name) as user_name,
                ak.permissions,
                ak.expires_at,
                ak.last_used_at,
                ak.usage_count,
                ak.is_active,
                COUNT(al.id) as total_requests,
                COUNT(CASE WHEN al.response_code < 400 THEN 1 END) as successful_requests,
                COUNT(CASE WHEN al.response_code >= 400 THEN 1 END) as failed_requests,
                AVG(al.response_time) as avg_response_time
            FROM api_keys ak
            LEFT JOIN users u ON ak.user_id = u.id
            LEFT JOIN api_logs al ON ak.id = al.api_key_id 
                AND al.requested_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
            GROUP BY ak.id, ak.name, ak.user_id, u.first_name, u.last_name, 
                     ak.permissions, ak.expires_at, ak.last_used_at, ak.usage_count, ak.is_active
        ');

        // Webhook'ların durumu
        DB::statement('
            CREATE VIEW webhooks_status AS
            SELECT 
                w.id,
                w.name,
                w.url,
                w.user_id,
                CONCAT(u.first_name, " ", u.last_name) as user_name,
                w.events,
                w.is_active,
                w.last_triggered_at,
                w.success_count,
                w.failure_count,
                COUNT(wd.id) as recent_deliveries,
                COUNT(CASE WHEN wd.status = "delivered" THEN 1 END) as recent_successful,
                COUNT(CASE WHEN wd.status = "failed" THEN 1 END) as recent_failed,
                COUNT(CASE WHEN wd.status = "pending" THEN 1 END) as recent_pending
            FROM webhooks w
            LEFT JOIN users u ON w.user_id = u.id
            LEFT JOIN webhook_deliveries wd ON w.id = wd.webhook_id 
                AND wd.created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)
            GROUP BY w.id, w.name, w.url, w.user_id, u.first_name, u.last_name, 
                     w.events, w.is_active, w.last_triggered_at, w.success_count, w.failure_count
        ');

        // API endpoint'lerinin kullanım istatistikleri
        DB::statement('
            CREATE VIEW api_endpoints_stats AS
            SELECT 
                endpoint,
                method,
                COUNT(*) as total_requests,
                COUNT(CASE WHEN response_code < 400 THEN 1 END) as successful_requests,
                COUNT(CASE WHEN response_code >= 400 THEN 1 END) as failed_requests,
                AVG(response_time) as avg_response_time,
                MIN(response_time) as min_response_time,
                MAX(response_time) as max_response_time,
                COUNT(DISTINCT api_key_id) as unique_api_keys,
                COUNT(DISTINCT ip_address) as unique_ips
            FROM api_logs 
            WHERE requested_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
            GROUP BY endpoint, method
            ORDER BY total_requests DESC
        ');
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        // Views'leri sil
        DB::statement('DROP VIEW IF EXISTS api_endpoints_stats');
        DB::statement('DROP VIEW IF EXISTS webhooks_status');
        DB::statement('DROP VIEW IF EXISTS api_keys_summary');

        // Stored procedures'ları sil
        DB::statement('DROP PROCEDURE IF EXISTS GetWebhookDeliveryStats');
        DB::statement('DROP PROCEDURE IF EXISTS GetApiUsageStats');

        // Tabloları sil (foreign key sırası önemli)
        Schema::dropIfExists('api_cache');
        Schema::dropIfExists('rate_limits');
        Schema::dropIfExists('webhook_deliveries');
        Schema::dropIfExists('webhooks');
        Schema::dropIfExists('api_logs');
        Schema::dropIfExists('api_keys');
    }
};